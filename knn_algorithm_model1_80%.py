# -*- coding: utf-8 -*-
"""KNN Algorithm (80% accuracy) - Data Mining project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rq9OdBf6Q5-WFjtOA5vAoruqDxcCvS5u
"""

# Import libraries:
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Load the data:
train_data_KNN = pd.read_csv("census-income.data.csv")
test_data_KNN = pd.read_csv("census-income.test.csv")

# Trim spaces and remove periods from the target column to standardize labels
train_data_KNN['income'] = train_data_KNN['income'].str.strip().str.replace('.', '')
test_data_KNN['income'] = test_data_KNN['income'].str.strip().str.replace('.', '')

# Changing income values to binary values
train_data_KNN['income'] = train_data_KNN['income'].replace({"<=50K": 0, ">50K": 1})
test_data_KNN['income'] = test_data_KNN['income'].replace({"<=50K": 0, ">50K": 1})

# Replacing the " ?" to "?" in the columns: 'work-class', 'occupation', 'native-country'
columns_to_replace = ['work-class', 'occupation', 'native-country']
for column in columns_to_replace:
    train_data_KNN[column] = train_data_KNN[column].replace(' ?', '?')
    test_data_KNN[column] = test_data_KNN[column].replace(' ?', '?')

# Concatenate train and test data
combined_data = pd.concat([train_data_KNN, test_data_KNN])

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# List of categorical columns
categorical_columns = ['work-class', 'education', 'marital-status', 'occupation',
                       'relationship', 'race', 'sex', 'native-country']

# Apply label encoding to combined data
for column in categorical_columns:
    combined_data[column] = label_encoder.fit_transform(combined_data[column])

# Split the combined data back into train and test
train_data_KNN_encoded = combined_data[:len(train_data_KNN)]
test_data_KNN_encoded = combined_data[len(train_data_KNN):]

# Extract features and target variables
X_train = train_data_KNN_encoded.drop(columns=['income'])
y_train = train_data_KNN_encoded['income']
X_test = test_data_KNN_encoded.drop(columns=['income'])
y_test = test_data_KNN_encoded['income']

# Define the range of k values to try
k_range = range(1, 51)

# Initialize lists to store accuracy and k values
accuracies = []
best_k_values = []

# Iterate over each value of k
for k in k_range:
    # Initialize the KNN classifier with the current value of k
    knn_classifier = KNeighborsClassifier(n_neighbors=k)

    # Train the classifier on the training data
    knn_classifier.fit(X_train, y_train)

    # Make predictions on the test data
    y_pred = knn_classifier.predict(X_test)

    # Calculate the accuracy of the classifier
    accuracy = accuracy_score(y_test, y_pred)

    # Append the accuracy and k value to the lists
    accuracies.append(accuracy)
    best_k_values.append(k)

# Get the index of the highest accuracy
best_index = accuracies.index(max(accuracies))

# Print the best k value and its corresponding accuracy for the test dataset
best_k = best_k_values[best_index]
best_accuracy_test = accuracies[best_index]

print(f"Best k value (Test Set): {best_k}, Accuracy: {best_accuracy_test}")

# Initialize the KNN classifier with the best k value
best_knn_classifier = KNeighborsClassifier(n_neighbors=best_k)

# Train the classifier on the entire training data
best_knn_classifier.fit(X_train, y_train)

# Make predictions on the test data using the best classifier
y_pred_best_test = best_knn_classifier.predict(X_test)

# Calculate confusion matrix and classification report for the test dataset
conf_matrix_test = confusion_matrix(y_test, y_pred_best_test)
classification_report_test = classification_report(y_test, y_pred_best_test)

# Calculate accuracy for the training dataset
y_pred_best_train = best_knn_classifier.predict(X_train)
accuracy_train = accuracy_score(y_train, y_pred_best_train)

# Print accuracy for the training dataset
print(f"Accuracy (Training Set): {accuracy_train}")

# Print confusion matrix and classification report for the test dataset
print("\nTest Set Evaluation:")
print("Confusion Matrix:")
print(conf_matrix_test)
print("\nClassification Report:")
print(classification_report_test)

# Calculate confusion matrix and classification report for the training dataset
conf_matrix_train = confusion_matrix(y_train, y_pred_best_train)
classification_report_train = classification_report(y_train, y_pred_best_train)

# Print confusion matrix and classification report for the training dataset
print("\nTraining Set Evaluation:")
print("Confusion Matrix:")
print(conf_matrix_train)
print("\nClassification Report:")
print(classification_report_train)